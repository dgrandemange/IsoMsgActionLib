<iso-actions>

	<!--
		One first iso actions set identified by "ISO_ACTIONS_SET_1"
	-->
	<iso-action id="ISO_ACTIONS_SET_1"
		desc="One first iso actions set demonstrating some actions use">

		<!-- 
			"set" element :
			it sets a message field using a string value
		-->
		<set id="0" value="106" />

		<!--
			Another use of the "set" element :
			In this case, it sets a field value from a property wrapped by
			the action execution context.
			The ctxBeanPath attribute provide the path through execution 
			context to the relevant property from which we want 
			to retrieve the value for copy.
			This path use the notation used by class PropertyUtils from 
			Jakarta Commons BeanUtils API.
			See also section 8.5 of 
			"Apache Jakarta and Beyond-A Java programmer's introduction" 
			book.
		-->
		<set id="1" ctxBeanPath="ctx(onePropertyPath)" />

		<!-- 
			"ifMatchesList" element :
			Here, the condition can be read as 
				IF field of id 2 in !!source!! message match one of the strings 
				   {'tata', 'tete', 'titi', 'toto'}
				THEN
					set field in !!dest!! message with value "tutu"
				ELSE
					remove field 2 from !!dest!! message
				END IF
			
			An optional attribute "ignoreCase" can be used.
			
			Generally speaking, all conditionnal actions allow the inclusion 
			of an "else" element in case condition is not fulfilled.
			More over, as the conditionnal actions follow a composite design, 
			you can specify several levels of conditions. (Beware of cyclomatic complexity.) 
		-->
		<ifMatchesList id="2" matchlist="tata tete titi toto">
			<set id="2" value="tutu"/>
			<else>
				<removeField id="2" />
			</else>
		</ifMatchesList>

		<ifMatchesList id="3" matchlist="baba bebe bibi bobo" ignoreCase="true">
			<set id="3" ctxBeanPath="ctx(anotherPropertyPath)"/>			
		</ifMatchesList>

		<!-- 
			"ifMatchesRegExp" element :
			Here, condition is fulfilled if the field in source message 
			matches the regular expression provided by the "pattern" attribute 
		-->
		<ifMatchesRegExp id="4" pattern="^([tT][aeiouy]){2}$">
			<set id="4" value="toto" />					
		</ifMatchesRegExp>

		<!-- 
			"ifPresent" element :
			Here, condition is fulfilled if the field is present in the source 
			message
		-->
		<ifPresent id="5">
			<set id="5" value="defaultValue" />
		</ifPresent>

	</iso-action>



	<!--
		Another iso actions set identified by "ISO_ACTIONS_SET_2"
	-->
	<iso-action id="ISO_ACTIONS_SET_2"
		desc="Another iso actions set">

		<!-- 
			"setDate" element :
			It sets a field in the dest message with current date formatted 
			along with the format specified in the "format" attribute 
			(see javadoc for class java.text.SimpleDateFormat)
		-->
		<setDate id="6" format="MMyyyy" />

		<!-- 
			"setRandomNumber" element :
			It sets a field in the dest message with a random number. 
			Attribute "digits" provides the expected digits count.
		-->
		<setRandomNumber id="7" digits="6" />

		<!-- 
			"stringCopy" element :
			It copies a field from the source message to another field in the destination message	 
		-->
		<stringCopy id="8" sourceId="7" />

		<!--			
			"removeField" element :
			It removes a field from the destination message   
		-->
		<removeField id="10" />

		<!--
			"fieldCopyByRef" element :
			It operates a byref copy of a field from the source message 
			to the same field in the dest message
			As this is a byref copy, it is no use precising dest field. 
		-->
		<fieldCopyByRef id="11" sourceId="2" sourceMsg="1" />

		<!--
			"stringRegExpReplace" element :
			It sets the dest field value in the dest message using a regular expression 
			and a replace expression that are applied to the source field in source message 
		-->
		<stringRegExpReplace id="12" sourceId="11" pattern="(^.*$)" replace="$1" />

		<!--
			"createCmpField" element :
			It creates a composite field.
			This action is required when you want to set fields in a sub message of dest message.
			Here literally : create field of id 13 as a sub field (ISOMessage),
			and from this sub-field, create a field of id 1 as a sub field too.
			Then only will you be able to set values to fields 13.1.2, 13.1.3, 13.1.4 and so on ...			
		-->
		<createCmpField id="13.1"/>

		<!--
			Positionnement de la valeur d'un champ d'un message Ã  partir de la valeur 
			d'un champ d'un autre message (d'index 1 dans le tableau des messages ISO disponibles).
			
			"stringCopy" element :
			It set dest field in the dest message with the source field value from the source message 
		-->
		<stringCopy id="14" msg="0" sourceId="7" sourceMsg="1" />

		<!--
			"bshScript" element :
			Executes a BSH script.
			
			Pre-defined vars are :
			* 'messages' : (ISOMsg[]) messages array passed through the action process() method,
			* 'context'  : (Map<String, Object>), action execution context passed through the action process() method
			
			In BSH script, an entrypoint() method is required. 
			This is the one method that the action will effectively call regardless of any other declared methods.
						 
		-->
		<bshScript includes="commonScript1Id, commonScript2" scriptId="unIdUniqueDeSCriptBSH">
			<![CDATA[
				// Here, two messages in array
				// Our goal here is to update field 4 of first message in array (index 0) from
				// - either the vlaue of field 1 of second message in array (index 1),
				// - either the value of property 'defaultValue' in action execution context,
				// Decision is made on the value of field 2 in the target message. See ?

				entrypoint() {
					org.jpos.iso.ISOMsg destMsg = messages[0];
					org.jpos.iso.ISOMsg srcMsg = messages[1];
	
					String valChamp2MsgDest = destMsg.getString(2);
	
					if ("babebibobu".equals(valChamp2MsgDest)) {
						destMsg.set(4, srcMsg.getString(1));
					} else {
						destMsg.set(4, context.get("defaultValue"));
					}
				}
			]]>
		</bshScript>

		<!-- 
			Here we see a use of the "applyNotOp" attribute 
			that operates the boolean operation NOT to a condition.
			This attribute is available among all conditional actions. 
		-->
		<ifPresent id="5" applyNotOp="true">
			<set id="5" value="defaultValue" />
		</ifPresent>

		<!-- 
			Here is a use of the "concat" attribute with the "stringCopy" element. 
			In this case, the source value is concatened to the actual value of 
			the dest field, thus not replacing it.
		-->
		<stringCopy id="15" msg="0" sourceId="7" sourceMsg="1" concat="true"/>

		<!--
			"stringPadding" element :
			It pads the actual value of specified dest field in the dest message.
			Here, we want to left pad field 14 value with char '0' 
			with a total expected length of 10 chars. 
		-->
		<stringPadding id="14" msg="0" padChar="0" padDir="left" expLen="10" />

		<!--
			"merge" element :
			Merge all fields from source message into dest message.
			Source fields may replace already existing dest fields in dest message.  
		-->
		<merge msg="0" sourceMsg="1" />
		
		<!--  
			"setDate" element :
			set value to today + 1 day			 
		-->
		<setDate id="6" format="ddMMyyyy" addValue="1" addInterval="DAY" />
		
		<!--  
			"setDate" element :
			set value to today + 1 month			 
		-->
		<setDate id="6" format="ddMMyyyy" addValue="1" addInterval="MONTH" />

		<!--  
			"setDate" element :
			set value to today + 1 year			 
		-->
		<setDate id="6" format="ddMMyyyy" addValue="1" addInterval="YEAR" />
		
		<!--  
			"setDate" element :
			set value to today + 1 hour			 
		-->
		<setDate id="6" format="ddMMyyyy hh:mm:ss" addValue="1" addInterval="HOUR" />
		
		<!--  
			"setDate" element :
			set value to today + 1 minute			 
		-->
		<setDate id="6" format="MMyyyy hh:mm:ss" addValue="1" addInterval="MINUTE" />

		<!--  
			"setDate" element :
			set value to today + 10 seconds			 
		-->
		<setDate id="6" format="MMyyyy hh:mm:ss" addValue="10" addInterval="SECOND" />

		<!--  
			"set" element :
			the dest field with the n("fixedLength" attribute value) first chars of the value attribute 
		-->
		<set id="14" value="C'EST SUPER LES FILTRES" fixedLength="12" />
		
		<!--  
			"set" element :
			the dest field with the n("fixedLength" attribute value) first chars of the value pointed by "ctxBeanPath" 
		-->
		<set id="14" ctxBeanPath="ctx(onePropertyPath)" fixedLength="18"/>

		<!--
			"validate" element :
			It declares a validation context.
			A validation is required when using field format declaration actions and field checking actions.
			Checkings will operate on dest message.
		-->
		<validate>

			<!-- 
				First you must declare field formats
				
				Available attributes for filed format declaration :
				===================================================
				* "id" : a field path or a string id that may be further referred by a checkField action (using a fieldFormatRef attribute)
				* "type" : DATE, REGEXP, or {ALPHA,NUM,SPECIAL,SPACES} combination delimited by '+'
				         	
				* "lgMin" : min length of field value
						  non applicable for types DATE et REGEXP
						  default=0
						  
				* "lg" : max length of field value
				       if attribute "lgVariable" is 'true', then indicates expected fixed length   
				       non applicable for types DATE et REGEXP
				       defaut=0
				       
				* "lgVariable" : {true|false} indicates if field value length is variable or not
								defaut=true
								
				* "pattern" : only relvant for types DATE et REGEXP
				            if type is REGXEP -> regular expression to match
				            if type is DATE -> date pattern to match (see javadoc for class java.text.SimpleDateFormat)	
			-->		
			<fieldFormat id="15" type="ALPHA+NUM+SPECIAL+SPACES" lgMin="6" lg="15" />
			<fieldFormat id="16" type="ALPHA+NUM" lg="10" lgVariable="false" />
			<fieldFormat id="17" type="DATE" pattern="dd/MM/yyyy:HH:mm:ss" />
			<fieldFormat id="myFormatForField18" type="REGEXP" pattern="[0-9]{1,10}[.][0-9]{2}[A-Z]{3}" />			

			<!-- 
				Then only, you can check fields values along with their presence 
			-->
			<checkField id="15" />
			<checkField id="16" presence="mandatory"/>
			<checkField id="17" presence="optional"/>
			<checkField id="18" presence="unexpected" fieldFormatRef="myFormatForField18" />

		</validate>
		
		<!-- 
			"group" element :
			It declares a group of actions.
			It can reveal useful to put some actions of same nature together, 
			or to give some actions one parent action. 
		-->
		<group>
			<set id="19" value="1" />			
			<setDate id="20" format="MMyyyy" />
		</group>
		
		<!--
			"setResponseMTI" element :
			In dest message, replace MTI by its corresponding response MTI. 
			If a failure occurs in determining response MTI, 
			the default response MTI provided by attribute "default" is used.			
		-->
		<setResponseMTI msg="3" default="9919" />
		
		<!-- 
			"binaryCopy" element :
			It operates a raw binary action from a source field in a source message to a dest field
			in a dest message			
		-->
		<binaryCopy id="8" sourceId="7" />

		<!-- 
			"updateContext" element :
			It operates a copy from a source message field value to an attribute of the execution context
			The fixedLength attribute is optional
		-->
		<updateContext ctxBeanPath="ctx(anotherPropertyPath)" sourceId="7" fixedLength="20" />

		<!-- 
			"customAction" action element :
			It delegates to a user customized iso action
			This user customized iso action properties can be populated 
			by wrapping properties into a CDATA section as shown below.  
		-->
		<customAction class="dummy.CustomizedISOAction">
		<![CDATA[
			<propTypeInt>12345</propTypeInt>
			<propTypeString>a dummy string</propTypeString>
			]]>
		</customAction>		

		<!-- 
			"setBinary" element :
			it sets a message field using a binary value.
			Value is passed as an hex string.
		-->
		<setBinary id="123" value="00FFA0" />

		<!-- 
			"set" element :
			As seen before, it sets a message field using a value.
			Optional attribute binary indicates if dest field should 
			be valued as a binary field.
		-->		
		<set id="456" value="EEDD99" binary="true" />

		<!-- 
			"ifCustomCondition" element :
			Here, the condition can be read as 
				IF my customized condition is true
				THEN
					set field in !!dest!! message with value "tutu"
				ELSE
					remove field 2 from !!dest!! message
				END IF			
		-->
		<ifCustomCondition class="dummy.MyCustomizedCondition">
			<set id="2" value="tutu"/>
			<else>
				<removeField id="2" />
			</else>
		</ifCustomCondition>

		<!-- 
			Loop action
			
			The loop action defines first a token.
			In the sub actions wrapped by the loop action, each time an 'id' or a 'sourceId' attribute refer to this token, these ids will be patched at runtime for each each iteration.  			
			
			Two looping modes :			
			1. precise a 'msg' index and a composite field 'id' path : the loop will execute using each subfield number of this composite field,
			2. precise a loop interval using the 'begin' and 'end' attributes, 
		-->
		<!-- 
			Loop sample 1
			Here we want to iterate on each subfield of composite field 6 in message 1.			
		-->
		<loop token="i" id="6" msg="1">
			<createCmpField id="5.${i}"/>
			<stringCopy id="5.${i}.1" sourceId="6.${i}.2" />
		</loop>  

		<!-- 
			Loop sample 2
			Here we specify a loop interval [1-4]			
		-->
		<loop token="j" begin="1" end="4">
			<ifPresent id="5.${j}" applyNotOp="true">
				<createCmpField id="5.${j}"/>
				<stringCopy id="5.${j}.1" sourceId="6.${j}.2" />
			</ifPresent>
		</loop>  

	</iso-action>

</iso-actions>