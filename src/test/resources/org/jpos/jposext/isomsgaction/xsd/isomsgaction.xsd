<?xml version="1.0" encoding="ISO-8859-1" ?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">

	<!-- ============================ -->
	<!-- BEGIN Common attributes defs -->
	<!-- ============================ -->
	<xs:attribute name="id" type="xs:string">
		<xs:annotation>
			<xs:documentation>
    		<![CDATA[
       			Destination field id/path<BR>
       			If destination field is a subfield, all its parents hierarchy must be specified using field separator "."<BR>
       			Field id can also be expressed in hexadecimal using a "0x" prefix<BR>
       			<BR>
       			Sample values : <BR>
       			--------------- <BR>
       			* 4        : field number 4,<BR>
       			* 59.0x207 : subfield no 0x207, child of composite field 59,<BR>
       			* 44.0xAA.1 : subfield no 1, child of (repeatable) field 0xAA, child of composite field 44<BR> 
       			]]>
			</xs:documentation>
		</xs:annotation>
	</xs:attribute>

	<xs:attribute name="sourceId" type="xs:string">
		<xs:annotation>
			<xs:documentation>
    		<![CDATA[
       			Source field id/path<BR>
       			If source field is a subfield, all its parents hierarchy must be specified using field separator "."<BR>
       			Field id can also be expressed in hexadecimal using a "0x" prefix<BR>
       			<BR>
       			Sample values : <BR>
       			--------------- <BR>
       			* 4        : field number 4,<BR>
       			* 59.0x207 : subfield no 0x207, child of composite field 59,<BR>
       			* 44.0xAA.1 : subfield no 1, child of (repeatable) field 0xAA, child of composite field 44<BR> 
       			]]>
			</xs:documentation>
		</xs:annotation>
	</xs:attribute>

	<xs:attribute name="msg" type="xs:integer" default="0">
		<xs:annotation>
			<xs:documentation>
    		<![CDATA[
       			Destination msg index in current action messages array<BR>
       			]]>
			</xs:documentation>
		</xs:annotation>
	</xs:attribute>

	<xs:attribute name="sourceMsg" type="xs:integer" default="1">
		<xs:annotation>
			<xs:documentation>
    		<![CDATA[
       			Source msg index in current action messages array<BR>
       			]]>
			</xs:documentation>
		</xs:annotation>
	</xs:attribute>

	<xs:attribute name="value" type="xs:string">
		<xs:annotation>
			<xs:documentation>
    		<![CDATA[commonly used attribute to set a field value<BR>
    		NB : when dealing with binary value, value should be expressed as an hexadecimal string<BR>
       		]]>
			</xs:documentation>
		</xs:annotation>
	</xs:attribute>

	<xs:attribute name="ctxBeanPath" type="xs:string" default="ctx(attr).property">
		<xs:annotation>
			<xs:documentation>
    		<![CDATA[The ctxBeanPath attribute provide the path through execution context to the relevant property from which to retrieve a value.<BR>
			This path use the notation used by class PropertyUtils ({@link http://commons.apache.org/beanutils/api/index.html}) from Jakarta Commons BeanUtils API.<BR>
			See also section 8.5 of "Apache Jakarta and Beyond-A Java programmer's introduction" book.<BR>
			<BR>
   			Sample values : <BR>
   			--------------- <BR>
			* ctx(contractNumber) : will look for a "contractNumber" entry in the current action context, and retrieve its value,<BR>
			* ctx(merchant).activityCode : will look for bean 'merchant' in action context, then retrieve its "activityCode" property's value<BR>			
       		]]>
			</xs:documentation>
		</xs:annotation>
	</xs:attribute>

	<xs:attribute name="fixedLength" type="xs:integer" />

	<xs:attribute name="binary" type="xs:boolean" default="false">
		<xs:annotation>
			<xs:documentation>
    		<![CDATA[When setting a field'svalue, "true" indicates that the value should be injected as a binary value]]>
			</xs:documentation>
		</xs:annotation>
	</xs:attribute>

	<xs:attribute name="applyNotOp" type="xs:boolean" default="false">
		<xs:annotation>
			<xs:documentation>
    		<![CDATA[In a condition action, a "true" value indicates to operate a NOT on the condition]]>
			</xs:documentation>
		</xs:annotation>
	</xs:attribute>
	
	<xs:attributeGroup name="conditionalActionsCommonAttributes">
		<xs:attribute ref="id" use="required" />
		<xs:attribute ref="msg" use="optional" />
		<xs:attribute ref="applyNotOp" use="optional" default="false" />					
	</xs:attributeGroup>
	<!-- ========================== -->
	<!-- END Common attributes defs -->
	<!-- ========================== -->


	<!-- ================== -->
	<!-- BEGIN Actions defs -->
	<!-- ================== -->

	<!-- Simple actions -->
	<xs:element name="set">
		<xs:annotation>
			<xs:documentation>
    			<![CDATA[Set one field's value in a message<BR>
    			<BR>
    			Value can be specified as :<BR>
    			* a literal string (see attribute "value"),<BR>
    			* a value retrieved from the current action context (see attribute "ctxBeanPath")<BR>
    			]]>
			</xs:documentation>
		</xs:annotation>

		<xs:complexType>
			<xs:attribute ref="id" use="required" />
			<xs:attribute ref="msg" use="optional" />
			<xs:attribute ref="value" use="optional" />
			<xs:attribute ref="ctxBeanPath" use="optional" />
			<xs:attribute ref="fixedLength" use="optional" />
			<xs:attribute ref="binary" use="optional" />
		</xs:complexType>
	</xs:element>

	<xs:element name="setDate">
		<xs:annotation>
			<xs:documentation>
    			<![CDATA[Set one field's value in a message using current system date<BR>
    			Date is formatted before being injected in the field (see attribute "format")<BR>    			
    			Date may also be modified by adding/substracting amounts of date/time units (see attributes "addValue" and "addInterval").<BR>
    			]]>
			</xs:documentation>
		</xs:annotation>

		<xs:complexType>
			<xs:attribute ref="id" use="required" />
			<xs:attribute ref="msg" use="optional" />
			<xs:attribute ref="binary" use="optional" />

			<xs:attribute name="format" type="xs:string" use="required">
				<xs:annotation>
					<xs:documentation>
		    		<![CDATA[pattern describing a date/time format <BR>
		    		See java.text.SimpleDateFormat documentation<BR>
		    		]]>
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>

			<xs:attribute name="addValue" type="xs:integer" use="optional">
				<xs:annotation>
					<xs:documentation>
		    			<![CDATA[Amount of date or time to be added]]>
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>

			<xs:attribute name="addInterval" use="optional">
				<xs:simpleType>
					<xs:annotation>
						<xs:documentation>
		    			<![CDATA[date/time unit]]>
						</xs:documentation>
					</xs:annotation>

					<xs:restriction base="xs:string">
						<xs:enumeration value="DAY" />
						<xs:enumeration value="MONTH" />
						<xs:enumeration value="YEAR" />
						<xs:enumeration value="HOUR" />
						<xs:enumeration value="MINUTE" />
						<xs:enumeration value="SECOND" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>

		</xs:complexType>
	</xs:element>

	<xs:element name="setRandomNumber">
		<xs:annotation>
			<xs:documentation>
    			<![CDATA[Set one field's value in a message with a randomely generated number]]>
			</xs:documentation>
		</xs:annotation>

		<xs:complexType>
			<xs:attribute ref="id" use="required" />
			<xs:attribute ref="msg" use="optional" />
			<xs:attribute ref="binary" use="optional" />

			<xs:attribute name="digits" type="xs:positiveInteger"
				use="required">
				<xs:annotation>
					<xs:documentation>
		    		<![CDATA[expected digits count of random number]]>
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name="stringCopy">
		<xs:annotation>
			<xs:documentation>
    			<![CDATA[Copy one field value from a source message to a field in a destination message]]>
			</xs:documentation>
		</xs:annotation>

		<xs:complexType>
			<xs:attribute ref="id" use="required" />
			<xs:attribute ref="msg" use="optional" />
			<xs:attribute ref="sourceId" use="required" />
			<xs:attribute ref="sourceMsg" use="optional" />
			<xs:attribute ref="binary" use="optional" />

			<xs:attribute name="concat" type="xs:boolean" use="optional"
				default="false">
				<xs:annotation>
					<xs:documentation>
		    		<![CDATA["true" indicates copy should operate as a concatenation rathen than a replacment copy]]>
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name="removeField">
		<xs:annotation>
			<xs:documentation>
    			<![CDATA[Remove one field from a message]]>
			</xs:documentation>
		</xs:annotation>

		<xs:complexType>
			<xs:attribute ref="id" use="required" />
			<xs:attribute ref="msg" use="optional" />
		</xs:complexType>
	</xs:element>

	<xs:element name="fieldCopyByRef">
		<xs:annotation>
			<xs:documentation>
    			<![CDATA[Copy by reference of one field from a source message to a field in a destination message.<BR>
    			Once copy is done, source message and destination message fields share the same field instance.]]>
			</xs:documentation>
		</xs:annotation>

		<xs:complexType>
			<xs:attribute ref="id" use="required" />
			<xs:attribute ref="msg" use="optional" />
			<xs:attribute ref="sourceId" use="required" />
			<xs:attribute ref="sourceMsg" use="optional" />
		</xs:complexType>
	</xs:element>

	<xs:element name="stringRegExpReplace">
		<xs:annotation>
			<xs:documentation>
    			<![CDATA[Extract source field value from a source message, submit it to a replacement expression, and inject the result to destination message field.]]>
			</xs:documentation>
		</xs:annotation>

		<xs:complexType>
			<xs:attribute ref="id" use="required" />
			<xs:attribute ref="msg" use="optional" />
			<xs:attribute ref="sourceId" use="required" />
			<xs:attribute ref="sourceMsg" use="optional" />
			<xs:attribute ref="binary" use="optional" />

			<xs:attribute name="pattern" type="xs:string" use="required">
				<xs:annotation>
					<xs:documentation>
		    		<![CDATA[a regular expression pattern with groups capture (see java.util.regex.Pattern)<BR>
						<BR>
			   			Sample values : <BR>
			   			--------------- <BR>
		    			* "^(.*)$" : select all field content in group no 1,  
		    		]]>
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>

			<xs:attribute name="replace" type="xs:string" use="required">
				<xs:annotation>
					<xs:documentation>
		    		<![CDATA[a replacement expression refering regexp pattern groups
						<BR>
			   			Sample values : <BR>
			   			--------------- <BR>
		    			* "$1" : replace field valeu with group 1 value,  
		    		]]>
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>

		</xs:complexType>
	</xs:element>

	<xs:element name="createCmpField">
		<xs:annotation>
			<xs:documentation>
    			<![CDATA[Create a composite field in a message]]>
			</xs:documentation>
		</xs:annotation>

		<xs:complexType>
			<xs:attribute ref="id" use="required" />
			<xs:attribute ref="msg" use="optional" />
		</xs:complexType>
	</xs:element>

	<xs:element name="bshScript">
		<xs:annotation>
			<xs:documentation>
    			<![CDATA[Execute a bsh script snippet.<BR>
    			Snippet must provide an "entrypoint()" method.<BR>
    			Here follows the prefedined variables in the BSH context :<BR>
    			* messages : the current action's message array,<BR>
    			* context : the current action's execution context<BR>
    			 ]]>
			</xs:documentation>
		</xs:annotation>

		<xs:complexType>
			<xs:simpleContent>
				<xs:extension base="xs:string">
					<xs:attribute name="scriptId" type="xs:string" use="optional" />
					<xs:attribute name="includes" type="xs:string" use="optional" />
				</xs:extension>
			</xs:simpleContent>
		</xs:complexType>
	</xs:element>

	<xs:element name="stringPadding">
		<xs:annotation>
			<xs:documentation>
    			<![CDATA[Pad one field's value]]>
			</xs:documentation>
		</xs:annotation>

		<xs:complexType>
			<xs:attribute ref="id" use="required" />
			<xs:attribute ref="msg" use="optional" />
			<xs:attribute ref="binary" use="optional" />

			<xs:attribute name="padChar" type="xs:string" use="optional"
				default=" ">
				<xs:annotation>
					<xs:documentation>
		    			<![CDATA[padding character]]>
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>

			<xs:attribute name="padDir" use="optional" default="left">
				<xs:simpleType>
					<xs:annotation>
						<xs:documentation>
		    			<![CDATA[padding direction (left, right)]]>
						</xs:documentation>
					</xs:annotation>

					<xs:restriction base="xs:string">
						<xs:enumeration value="right" />
						<xs:enumeration value="left" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>

			<xs:attribute name="expLen" type="xs:positiveInteger"
				use="required">
				<xs:annotation>
					<xs:documentation>
		    			<![CDATA[padding length]]>
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>

		</xs:complexType>
	</xs:element>

	<xs:element name="merge">
		<xs:annotation>
			<xs:documentation>
    			<![CDATA[Merge one source message with a destination message.]]>
			</xs:documentation>
		</xs:annotation>

		<xs:complexType>
			<xs:attribute ref="msg" use="required" />
			<xs:attribute ref="sourceMsg" use="required" />

			<xs:attribute name="clone" type="xs:boolean" use="optional" default="false">
				<xs:annotation>
					<xs:documentation>
		    			<![CDATA[When attribute 'clone' is set to 'true', the source message is cloned.<BR> 
							This is then this cloned instance that is merged with the dest message.<BR>
						]]>
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name="setResponseMTI">
		<xs:annotation>
			<xs:documentation>
    			<![CDATA[Set a message's response MTI]]>
			</xs:documentation>
		</xs:annotation>

		<xs:complexType>
			<xs:attribute ref="msg" use="required" />

			<xs:attribute name="default" type="xs:integer" use="optional" />
		</xs:complexType>
	</xs:element>

	<xs:element name="binaryCopy">
		<xs:complexType>
			<xs:attribute ref="id" use="required" />
			<xs:attribute ref="msg" use="optional" />
			<xs:attribute ref="sourceId" use="required" />
			<xs:attribute ref="sourceMsg" use="optional" />
		</xs:complexType>
	</xs:element>

	<xs:element name="updateContext">
		<xs:complexType>
			<xs:attribute ref="sourceId" use="required" />
			<xs:attribute ref="sourceMsg" use="optional" />
			<xs:attribute ref="ctxBeanPath" use="required" />
			<xs:attribute ref="fixedLength" use="optional" />
		</xs:complexType>
	</xs:element>

	<xs:element name="customAction">
		<xs:complexType>
			<xs:simpleContent>
				<xs:extension base="xs:string">
					<xs:attribute name="class" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>
				    			<![CDATA[Full class name of the customized action]]>
							</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:extension>
			</xs:simpleContent>
		</xs:complexType>
	</xs:element>

	<xs:element name="setBinary">
		<xs:annotation>
			<xs:documentation>
    			<![CDATA[Set one binary field's value in a message<BR>
    			Attribute "value" should be populated with an hexadecimal string.<BR> 
    			]]>
			</xs:documentation>
		</xs:annotation>

		<xs:complexType>
			<xs:attribute ref="id" use="required" />
			<xs:attribute ref="msg" use="optional" />
			<xs:attribute ref="value" use="required" />
		</xs:complexType>
	</xs:element>

	<xs:group name="simpleActionsGroup">
		<xs:sequence>
			<xs:element ref="set" minOccurs="0" maxOccurs="unbounded" />

			<xs:element ref="setDate" minOccurs="0" maxOccurs="unbounded" />

			<xs:element ref="setRandomNumber" minOccurs="0" maxOccurs="unbounded" />

			<xs:element ref="stringCopy" minOccurs="0" maxOccurs="unbounded" />

			<xs:element ref="removeField" minOccurs="0" maxOccurs="unbounded" />

			<xs:element ref="fieldCopyByRef" minOccurs="0" maxOccurs="unbounded" />

			<xs:element ref="stringRegExpReplace" minOccurs="0"
				maxOccurs="unbounded" />

			<xs:element ref="createCmpField" minOccurs="0" maxOccurs="unbounded" />

			<xs:element ref="bshScript" minOccurs="0" maxOccurs="unbounded" />

			<xs:element ref="stringPadding" minOccurs="0" maxOccurs="unbounded" />

			<xs:element ref="merge" minOccurs="0" maxOccurs="unbounded" />

			<xs:element ref="setResponseMTI" minOccurs="0" maxOccurs="unbounded" />
			 
			<xs:element ref="binaryCopy" minOccurs="0" maxOccurs="unbounded" /> 

			<xs:element ref="updateContext" minOccurs="0" maxOccurs="unbounded" /> 

			<xs:element ref="customAction" minOccurs="0" maxOccurs="unbounded" /> 

			<xs:element ref="setBinary" minOccurs="0" maxOccurs="unbounded" /> 

		</xs:sequence>
	</xs:group>

	<!-- Conditional actions -->
	<xs:group name="conditionalActionsGroup">
		<xs:sequence>
		
			<xs:element name="ifMatchesList" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>
    			<![CDATA[Conditional action processed if a field of a message matches a specified list of values  
    			]]>
					</xs:documentation>
				</xs:annotation>

				<xs:complexType>
					<xs:sequence>
						<xs:group ref="allActionsGroup" minOccurs="0"
							maxOccurs="unbounded" />
						<xs:element name="else" minOccurs="0" maxOccurs="1">
							<xs:complexType>
								<xs:sequence>
									<xs:group ref="allActionsGroup" minOccurs="0"
										maxOccurs="unbounded" />
								</xs:sequence>
							</xs:complexType>
						</xs:element>
					</xs:sequence>

					<xs:attributeGroup ref="conditionalActionsCommonAttributes"/>					
					
					<xs:attribute name="matchlist" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>
		    			<![CDATA[space delimited string literals]]>
							</xs:documentation>
						</xs:annotation>
					</xs:attribute>

					<xs:attribute name="ignoreCase" type="xs:boolean" use="optional" default="false"/>

				</xs:complexType>
			</xs:element>
			
			<xs:element name="ifMatchesRegExp" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>
    			<![CDATA[Conditional action processed if a field of a message matches the specified regular expression  
    			]]>
					</xs:documentation>
				</xs:annotation>

				<xs:complexType>
					<xs:sequence>
						<xs:group ref="allActionsGroup" minOccurs="0"
							maxOccurs="unbounded" />
						<xs:element name="else" minOccurs="0" maxOccurs="1">
							<xs:complexType>
								<xs:sequence>
									<xs:group ref="allActionsGroup" minOccurs="0"
										maxOccurs="unbounded" />
								</xs:sequence>
							</xs:complexType>
						</xs:element>
					</xs:sequence>

					<xs:attributeGroup ref="conditionalActionsCommonAttributes"/>					
					
					<xs:attribute name="pattern" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>
		    			<![CDATA[regular expression to match]]>
							</xs:documentation>
						</xs:annotation>
					</xs:attribute>

				</xs:complexType>
			</xs:element>

			<xs:element name="ifPresent" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>
    			<![CDATA[Conditional action processed if a field is present in a message  
    			]]>
					</xs:documentation>
				</xs:annotation>

				<xs:complexType>
					<xs:sequence>
						<xs:group ref="allActionsGroup" minOccurs="0"
							maxOccurs="unbounded" />
						<xs:element name="else" minOccurs="0" maxOccurs="1">
							<xs:complexType>
								<xs:sequence>
									<xs:group ref="allActionsGroup" minOccurs="0"
										maxOccurs="unbounded" />
								</xs:sequence>
							</xs:complexType>
						</xs:element>
					</xs:sequence>

					<xs:attributeGroup ref="conditionalActionsCommonAttributes"/>

				</xs:complexType>
			</xs:element>

			<xs:element name="ifCustomCondition" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>
    			<![CDATA[Conditional action processed if a custom condition is fulfilled  
    			]]>
					</xs:documentation>
				</xs:annotation>

				<xs:complexType>
					<xs:sequence>
						<xs:group ref="allActionsGroup" minOccurs="0"
							maxOccurs="unbounded" />
						<xs:element name="else" minOccurs="0" maxOccurs="1">
							<xs:complexType>
								<xs:sequence>
									<xs:group ref="allActionsGroup" minOccurs="0"
										maxOccurs="unbounded" />
								</xs:sequence>
							</xs:complexType>
						</xs:element>
					</xs:sequence>

					<xs:attribute ref="msg" use="optional" />
					<xs:attribute ref="applyNotOp" use="optional" default="false" />
					
					<xs:attribute name="class" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>
		    			<![CDATA[custom condition class]]>
							</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					
				</xs:complexType>
			</xs:element>

			<xs:element name="ifSetInContext" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>
    			<![CDATA[Conditional action processed if an entry exists in the action execution context  
    			]]>
					</xs:documentation>
				</xs:annotation>

				<xs:complexType>
					<xs:sequence>
						<xs:group ref="allActionsGroup" minOccurs="0"
							maxOccurs="unbounded" />
						<xs:element name="else" minOccurs="0" maxOccurs="1">
							<xs:complexType>
								<xs:sequence>
									<xs:group ref="allActionsGroup" minOccurs="0"
										maxOccurs="unbounded" />
								</xs:sequence>
							</xs:complexType>
						</xs:element>
					</xs:sequence>					
										
					<xs:attribute ref="applyNotOp" use="optional" default="false" />					
					
					<xs:attribute name="key" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>
		    			<![CDATA[entry key to look for]]>
							</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					
				</xs:complexType>
			</xs:element>
			
		</xs:sequence>
	</xs:group>
	
	<xs:group name="allActionsGroup">
		<xs:sequence>
			<xs:group ref="simpleActionsGroup" minOccurs="0" maxOccurs="unbounded"/>
			<xs:group ref="conditionalActionsGroup" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:group>	
	<!-- ================== -->
	<!-- END   Actions defs -->
	<!-- ================== -->

	<!-- ====================== -->
	<!-- BEGIN root element def -->
	<!-- ====================== -->
	<xs:element name="iso-action">
		<xs:complexType>
			<xs:sequence>				
				<xs:group ref="allActionsGroup" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>

			<xs:attribute name="id" use="required" />
			<xs:attribute name="desc" use="optional" />
		</xs:complexType>
	</xs:element>
	<!-- ====================== -->
	<!-- END   root element def -->
	<!-- ====================== -->

</xs:schema> 